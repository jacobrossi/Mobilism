var App = new function () { function M() { if (e === true) { var t = ""; t += "a: " + L + "   "; t += "b: " + k + "   "; t += "c: " + L + "   "; t += "d: " + y + "   "; t += "e: " + b + "   "; t += "f: " + pointerDownDuration + "   "; t += "g: " + pointerDownDistanceX + "   "; t += "h: " + pointerDownDistanceY + "   "; t += "i: " + changeOrbitAmount + "   "; o.html(t) } } function _() { var e = new THREE.MeshLambertMaterial({ color: 16777215, map: ImageUtils.loadTexture("Images/MicrosoftLogo.png"), shading: THREE.SmoothShading }), t = new THREE.MeshLambertMaterial({ color: 16777215, wireframe: true }); m = new THREE.Mesh(new Plane(N, C, x, T), [e, t]); m.rotation.x = -Math.PI * .5; m.overdraw = true; n.addChild(m); g = m.geometry.vertices; sCount = g.length; while (sCount--) { var r = g[sCount]; r.springs = []; r.velocity = new THREE.Vector3; if (r.position.x > -N * .5) { r.springs.push({ start: sCount, end: sCount - 1 }) } if (r.position.x < N * .5) { r.springs.push({ start: sCount, end: sCount + 1 }) } if (r.position.y < C * .5) { r.springs.push({ start: sCount, end: sCount - (x + 1) }) } if (r.position.y > -C * .5) { r.springs.push({ start: sCount, end: sCount + (x + 1) }) } } } function D() { document.onselectstart = function () { return false }; window.addEventListener("contextmenu", function (e) { if (e.preventDefault) { e.preventDefault() } }, false); window.addEventListener("selectstart", function (e) { if (e.preventDefault) { e.preventDefault() } }, false); window.addEventListener("dragstart", function (e) { if (e.preventDefault) { e.preventDefault() } }, false); document.addEventListener("MSGestureHold", function (e) { e.preventDefault() }, false); window.addEventListener("MSHoldVisual", function (e) { e.preventDefault() }); $(window).resize(callbacks.windowResize); $(window).keydown(callbacks.keyDown); $(document.body).mousedown(callbacks.mouseDown); $(document.body).mouseup(callbacks.mouseUp); $(document.body).click(callbacks.mouseClick); if (window.navigator.pointerEnabled) { document.addEventListener("PointerMove", callbacks.pointerMove, false); document.addEventListener("PointerDown", callbacks.pointerDown, false); document.addEventListener("PointerUp", callbacks.pointerUp, false) } else if (window.navigator.msPointerEnabled) { document.addEventListener("MSPointerMove", callbacks.pointerMove, false); document.addEventListener("MSPointerDown", callbacks.pointerDown, false); document.addEventListener("MSPointerUp", callbacks.pointerUp, false) } else if (window.navigator.webkitPointerEnabled) { document.addEventListener("WebKitPointerMove", callbacks.pointerMove, false); document.addEventListener("WebKitPointerDown", callbacks.pointerDown, false); document.addEventListener("WebKitPointerUp", callbacks.pointerUp, false) } } function P() { var e = 1 / Math.max(d.width / N, d.height / C); var t = d.width * e; var n = d.height * e; s.drawImage(d, 0, 0, d.width, d.height, (N - t) * .5, (C - n) * .5, t, n); var r = new THREE.MeshLambertMaterial({ color: 16777215, map: ImageUtils.loadTexture(i.toDataURL("image/png")), shading: THREE.SmoothShading }); m.materials[0] = r } function H() { M(); p += L; t.position.x = Math.sin(p) * w; t.position.z = Math.cos(p) * w; t.update(); if (A == true && wireframeOpacity < 1) { wireframeOpacity += .02 } else if (A == false && wireframeOpacity > 0) { wireframeOpacity -= .02 } m.materials[1].opacity = wireframeOpacity; var e = g.length; while (e--) { var n = g[e], r = new THREE.Vector3(0, 0, -n.position.z * elasticity), i = n.springs, s = i.length; n.velocity.addSelf(r); while (s--) { var o = i[s], u = g[o.start].position.z - g[o.end].position.z; r = new THREE.Vector3(0, 0, u * elasticity * 50); g[o.end].velocity.addSelf(r); g[o.start].velocity.subSelf(r) } n.position.addSelf(n.velocity); n.velocity.multiplyScalar(y) } m.geometry.computeFaceNormals(true); m.geometry.__dirtyVertices = true; m.geometry.__dirtyNormals = true; rAF(B) } function B() { if (r) { r.render(n, t) } if (v) { H() } } function j(e, n) { if (v) { var r = e.offsetX || e.clientX - 220; var i = e.offsetY || e.clientY; var s = new THREE.Vector3(r / a * 2 - 1, -(i / f) * 2 + 1, .5); l.unprojectVector(s, t); var o = new THREE.Ray(t.position, s.subSelf(t.position).normalize()), u = o.intersectObject(m); if (u.length) { var c = u[0].point, h = Math.floor(c.x / N * x), p = Math.floor(c.z / C * T); h += x / 2; p += T / 2; index = p * (x + 1) + h; if (index >= 0 && index < g.length) { g[index].velocity.z += n } } } } function F(e, t) { var n; if (t == true) { n = L + e * 3 } else { n = L + e } if (n > -.16 && n < .16) { L = n } } function I() { } var e = false, t, n, r = null, i = null, s = null, o = $("#information"), u = $("#container"), a = u.width(), f = u.height(), l = new THREE.Projector, c = new THREE.Vector3, h = true, p = 0, d = null, v = true, m = null, g = [], y = .9, b = 400, w = 520, E = 1, S = 1e4, x = 20, T = 20, N = 340, C = 340, k = 3, L = .01, A = false, O = true; currentLightSource = 0; wireframeOpacity = 0, elasticity = .001, pointerDownTime = 0, pointerDownX = 0, pointerDownY = 0, changeOrbitAmount = "", musicPlaying = true; pointerDownDuration = 0, pointerDownDistanceX = 0, pointerDownDistanceY = 0; this.init = function () { D(); r = new THREE.WebGLRenderer; t = new THREE.Camera(45, a / f, E, S); n = new THREE.Scene; i = document.createElement("canvas"); i.width = N; i.height = C; s = i.getContext("experimental-webgl", { antialias: false, preserveDrawingBuffer: true }); t.position.y = 220; t.position.z = w; r.setSize(a, f); u.append(r.domElement); _(); this.addLights(); H() }; this.pause = function () { if (!v) { v = true } else { v = false } H() }; this.toggleMusic = function () { musicPlaying = !musicPlaying; if (musicPlaying == true) { document.getElementById("backgroundAudio").play() } else { document.getElementById("backgroundAudio").pause() } }; this.reset = function () { window.location.reload() }; this.addLights = function () { if (currentLightSource == 0) { currentLight = new THREE.PointLight(16777215); currentLight.position.x = 10; currentLight.position.y = 100; currentLight.position.z = 10; n.addLight(currentLight) } else if (currentLightSource == 1) { currentLight = new THREE.PointLight(7763574); currentLight.position.x = 10; currentLight.position.y = 100; currentLight.position.z = 20; n.addLight(currentLight) } else if (currentLightSource == 2) { currentLight = new THREE.PointLight(3669800); currentLight.position.x = 10; currentLight.position.y = 100; currentLight.position.z = 10; n.addLight(currentLight) } else { currentLight = new THREE.PointLight(3669800); currentLight.position.x = 40; currentLight.position.y = 40; currentLight.position.z = 0; n.addLight(currentLight) } }; this.toggleLight = function () { O = !O; if (O == true) { this.addLights() } else { n.removeLight(currentLight) } }; this.changeLightSource = function () { currentLightSource++; if (currentLightSource > 3) { currentLightSource = 0 } if (O == true) { n.removeLight(currentLight); this.addLights() } else { this.toggleLight() } }; this.toggleMesh = function () { A = !A }; callbacks = { mouseDown: function () { document.addEventListener("mousemove", callbacks.mouseMove, false); I() }, mouseMove: function (e) { j(e, k) }, mouseClick: function (e) { j(e, k * 5) }, mouseUp: function (e) { document.removeEventListener("mousemove", callbacks.mouseMove, false) }, pointerDown: function (e) { pointerDownTime = (new Date).getTime(); pointerDownX = e.x; pointerDownY = e.y }, pointerMove: function (e) { j(e, k * 6) }, pointerUp: function (e) { pointerDownDuration = (new Date).getTime() - pointerDownTime; pointerDownDistanceX = pointerDownX - e.x; pointerDownDistanceY = pointerDownY - e.y; if (pointerDownDuration > 120 && pointerDownDuration < 1e3 && pointerDownDistanceY > -80 && pointerDownDistanceY < 80) { changeOrbitAmount = pointerDownDistanceX / 200 * .01; F(changeOrbitAmount, e.shiftKey) } }, windowResize: function () { if (t) { a = u.width(), f = u.height(), t.aspect = a / f, r.setSize(a, f); t.updateProjectionMatrix() } }, keyDown: function (n) { if (t) { switch (n.keyCode) { case 37: changeOrbitAmount = .01; F(changeOrbitAmount, n.shiftKey); break; case 39: changeOrbitAmount = -.01; F(changeOrbitAmount, n.shiftKey); break; case 64: App.toggleMusic(); break; case 68: e = !e; if (e == true) { o.css("display", "block") } else { o.css("display", "none") } break; case 76: App.toggleLight(); break; case 77: App.toggleMesh(); break; case 80: App.pause(); break; case 82: App.reset(); break; case 83: App.changeLightSource(); break; default: } t.update() } } } }; $(document).ready(function () { App.init() }); window.rAF = function () { return window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.webkitRequestAnimationFrame || function (e) { window.setTimeout(e, 1e3 / 60) } }()